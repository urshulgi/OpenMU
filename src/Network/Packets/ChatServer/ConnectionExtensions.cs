// <copyright file="ConnectionExtensions.cs" company="MUnique">
// Licensed under the MIT License. See LICENSE file in the project root for full license information.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This source code was auto-generated by an XSL transformation.
//     Do not change this file. Instead, change the XML data which contains
//     the packet definitions and re-run the transformation (rebuild this project).
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable RedundantVerbatimPrefix
// ReSharper disable AssignmentIsFullyDiscarded
// ReSharper disable UnusedMember.Global
// ReSharper disable UseObjectOrCollectionInitializer

#nullable enable
namespace MUnique.OpenMU.Network.Packets.ChatServer;

using System;
using System.Threading;
using MUnique.OpenMU.Network;

/// <summary>
/// Extension methods to start writing messages of this namespace on a <see cref="IConnection"/>.
/// </summary>
public static class ConnectionExtensions
{

    /// <summary>
    /// Sends a <see cref="Authenticate" /> to this connection.
    /// </summary>
    /// <param name="connection">The connection.</param>
    /// <param name="roomId">The room id.</param>
    /// <param name="token">A token (integer number), formatted as string and "encrypted" with the 3-byte XOR key (FC CF AB).</param>
    /// <remarks>
    /// Is sent by the client when: This packet is sent by the client after it connected to the server, to authenticate itself.
    /// Causes reaction on server side: The server will check the token. If it's correct, the client gets added to the requested chat room.
    /// </remarks>
    public static async ValueTask SendAuthenticateAsync(this IConnection? connection, ushort @roomId, Memory<byte> @token)
    {
        if (connection is null)
        {
            return;
        }

        int WritePacket()
        {
            var length = AuthenticateRef.Length;
            var packet = new AuthenticateRef(connection.Output.GetSpan(length)[..length]);
            packet.RoomId = @roomId;
            @token.Span.CopyTo(packet.Token);

            return packet.Header.Length;
        }

        await connection.SendAsync(WritePacket).ConfigureAwait(false);
    }

    /// <summary>
    /// Sends a <see cref="ChatRoomClientJoined" /> to this connection.
    /// </summary>
    /// <param name="connection">The connection.</param>
    /// <param name="clientIndex">The client index.</param>
    /// <param name="name">The name.</param>
    /// <remarks>
    /// Is sent by the server when: This packet is sent by the server after another chat client joined the chat room.
    /// Causes reaction on client side: The client will add the client in its list (if over 2 clients are connected to the same room), or show its name in the title bar.
    /// </remarks>
    public static async ValueTask SendChatRoomClientJoinedAsync(this IConnection? connection, byte @clientIndex, string @name)
    {
        if (connection is null)
        {
            return;
        }

        int WritePacket()
        {
            var length = ChatRoomClientJoinedRef.Length;
            var packet = new ChatRoomClientJoinedRef(connection.Output.GetSpan(length)[..length]);
            packet.ClientIndex = @clientIndex;
            packet.Name = @name;

            return packet.Header.Length;
        }

        await connection.SendAsync(WritePacket).ConfigureAwait(false);
    }

    /// <summary>
    /// Sends a <see cref="LeaveChatRoom" /> to this connection.
    /// </summary>
    /// <param name="connection">The connection.</param>
    /// <remarks>
    /// Is sent by the client when: This packet is sent by the client when it leaves the chat room, before the connection closes.
    /// Causes reaction on server side: The server will remove the client from the chat room, notifying the remaining clients.
    /// </remarks>
    public static async ValueTask SendLeaveChatRoomAsync(this IConnection? connection)
    {
        if (connection is null)
        {
            return;
        }

        int WritePacket()
        {
            var length = LeaveChatRoomRef.Length;
            var packet = new LeaveChatRoomRef(connection.Output.GetSpan(length)[..length]);
            return packet.Header.Length;
        }

        await connection.SendAsync(WritePacket).ConfigureAwait(false);
    }

    /// <summary>
    /// Sends a <see cref="ChatRoomClientLeft" /> to this connection.
    /// </summary>
    /// <param name="connection">The connection.</param>
    /// <param name="clientIndex">The client index.</param>
    /// <param name="name">The name.</param>
    /// <remarks>
    /// Is sent by the server when: This packet is sent by the server after a chat client left the chat room.
    /// Causes reaction on client side: The client will remove the client from its list, or mark its name in the title bar as offline.
    /// </remarks>
    public static async ValueTask SendChatRoomClientLeftAsync(this IConnection? connection, byte @clientIndex, string @name)
    {
        if (connection is null)
        {
            return;
        }

        int WritePacket()
        {
            var length = ChatRoomClientLeftRef.Length;
            var packet = new ChatRoomClientLeftRef(connection.Output.GetSpan(length)[..length]);
            packet.ClientIndex = @clientIndex;
            packet.Name = @name;

            return packet.Header.Length;
        }

        await connection.SendAsync(WritePacket).ConfigureAwait(false);
    }

    /// <summary>
    /// Sends a <see cref="ChatMessage" /> to this connection.
    /// </summary>
    /// <param name="connection">The connection.</param>
    /// <param name="senderIndex">The sender index.</param>
    /// <param name="messageLength">The message length.</param>
    /// <param name="message">The message. It's "encrypted" with the 3-byte XOR key (FC CF AB).</param>
    /// <remarks>
    /// Is sent by the server when: This packet is sent by the server after another chat client sent a message to the current chat room.
    /// Causes reaction on client side: The client will show the message.
    /// </remarks>
    public static async ValueTask SendChatMessageAsync(this IConnection? connection, byte @senderIndex, byte @messageLength, Memory<byte> @message)
    {
        if (connection is null)
        {
            return;
        }

        int WritePacket()
        {
            var length = ChatMessageRef.GetRequiredSize(message.Length);
            var packet = new ChatMessageRef(connection.Output.GetSpan(length)[..length]);
            packet.SenderIndex = @senderIndex;
            packet.MessageLength = @messageLength;
            @message.Span.CopyTo(packet.Message);

            return packet.Header.Length;
        }

        await connection.SendAsync(WritePacket).ConfigureAwait(false);
    }

    /// <summary>
    /// Sends a <see cref="KeepAlive" /> to this connection.
    /// </summary>
    /// <param name="connection">The connection.</param>
    /// <remarks>
    /// Is sent by the client when: This packet is sent by the client in a fixed interval.
    /// Causes reaction on server side: The server will keep the connection and chat room intact as long as the clients sends a message in a certain period of time.
    /// </remarks>
    public static async ValueTask SendKeepAliveAsync(this IConnection? connection)
    {
        if (connection is null)
        {
            return;
        }

        int WritePacket()
        {
            var length = KeepAliveRef.Length;
            var packet = new KeepAliveRef(connection.Output.GetSpan(length)[..length]);
            return packet.Header.Length;
        }

        await connection.SendAsync(WritePacket).ConfigureAwait(false);
    }}