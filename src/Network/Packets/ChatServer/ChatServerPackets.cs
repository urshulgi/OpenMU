// <copyright file="ChatServerPackets.cs" company="MUnique">
// Licensed under the MIT License. See LICENSE file in the project root for full license information.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This source code was auto-generated by an XSL transformation.
//     Do not change this file. Instead, change the XML data which contains
//     the packet definitions and re-run the transformation (rebuild this project).
// </auto-generated>
//------------------------------------------------------------------------------

namespace MUnique.OpenMU.Network.Packets.ChatServer;

using System;
using static System.Buffers.Binary.BinaryPrimitives;

/// <summary>
/// Is sent by the client when: This packet is sent by the client after it connected to the server, to authenticate itself.
/// Causes reaction on server side: The server will check the token. If it's correct, the client gets added to the requested chat room.
/// </summary>
public readonly struct Authenticate
{
    private readonly Memory<byte> _data;

    /// <summary>
    /// Initializes a new instance of the <see cref="Authenticate"/> struct.
    /// </summary>
    /// <param name="data">The underlying data.</param>
    public Authenticate(Memory<byte> data)
        : this(data, true)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="Authenticate"/> struct.
    /// </summary>
    /// <param name="data">The underlying data.</param>
    /// <param name="initialize">If set to <c>true</c>, the header data is automatically initialized and written to the underlying span.</param>
    private Authenticate(Memory<byte> data, bool initialize)
    {
        this._data = data;
        if (initialize)
        {
            var header = this.Header;
            header.Type = HeaderType;
            header.Code = Code;
            header.Length = (byte)Math.Min(data.Length, Length);
        }
    }

    /// <summary>
    /// Gets the header type of this data packet.
    /// </summary>
    public static byte HeaderType => 0xC1;

    /// <summary>
    /// Gets the operation code of this data packet.
    /// </summary>
    public static byte Code => 0x00;

    /// <summary>
    /// Gets the initial length of this data packet. When the size is dynamic, this value may be bigger than actually needed.
    /// </summary>
    public static int Length => 16;

    /// <summary>
    /// Gets the header of this packet.
    /// </summary>
    public C1HeaderWithSubCode Header => new (this._data);

    /// <summary>
    /// Gets or sets the room id.
    /// </summary>
    public ushort RoomId
    {
        get => ReadUInt16LittleEndian(this._data.Span[4..]);
        set => WriteUInt16LittleEndian(this._data.Span[4..], value);
    }

    /// <summary>
    /// Gets or sets a token (integer number), formatted as string and "encrypted" with the 3-byte XOR key (FC CF AB).
    /// </summary>
    public Span<byte> Token
    {
        get => this._data.Slice(6, 10).Span;
    }

    /// <summary>
    /// Performs an implicit conversion from a Memory of bytes to a <see cref="Authenticate"/>.
    /// </summary>
    /// <param name="packet">The packet as span.</param>
    /// <returns>The packet as struct.</returns>
    public static implicit operator Authenticate(Memory<byte> packet) => new (packet, false);

    /// <summary>
    /// Performs an implicit conversion from <see cref="Authenticate"/> to a Memory of bytes.
    /// </summary>
    /// <param name="packet">The packet as struct.</param>
    /// <returns>The packet as byte span.</returns>
    public static implicit operator Memory<byte>(Authenticate packet) => packet._data; 
}


/// <summary>
/// Is sent by the server when: This packet is sent by the server after another chat client joined the chat room.
/// Causes reaction on client side: The client will add the client in its list (if over 2 clients are connected to the same room), or show its name in the title bar.
/// </summary>
public readonly struct ChatRoomClientJoined
{
    private readonly Memory<byte> _data;

    /// <summary>
    /// Initializes a new instance of the <see cref="ChatRoomClientJoined"/> struct.
    /// </summary>
    /// <param name="data">The underlying data.</param>
    public ChatRoomClientJoined(Memory<byte> data)
        : this(data, true)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ChatRoomClientJoined"/> struct.
    /// </summary>
    /// <param name="data">The underlying data.</param>
    /// <param name="initialize">If set to <c>true</c>, the header data is automatically initialized and written to the underlying span.</param>
    private ChatRoomClientJoined(Memory<byte> data, bool initialize)
    {
        this._data = data;
        if (initialize)
        {
            var header = this.Header;
            header.Type = HeaderType;
            header.Code = Code;
            header.Length = (byte)Math.Min(data.Length, Length);
            header.SubCode = SubCode;
        }
    }

    /// <summary>
    /// Gets the header type of this data packet.
    /// </summary>
    public static byte HeaderType => 0xC1;

    /// <summary>
    /// Gets the operation code of this data packet.
    /// </summary>
    public static byte Code => 0x01;

    /// <summary>
    /// Gets the operation sub-code of this data packet.
    /// The <see cref="Code" /> is used as a grouping key.
    /// </summary>
    public static byte SubCode => 0x00;

    /// <summary>
    /// Gets the initial length of this data packet. When the size is dynamic, this value may be bigger than actually needed.
    /// </summary>
    public static int Length => 15;

    /// <summary>
    /// Gets the header of this packet.
    /// </summary>
    public C1HeaderWithSubCode Header => new (this._data);

    /// <summary>
    /// Gets or sets the client index.
    /// </summary>
    public byte ClientIndex
    {
        get => this._data.Span[4];
        set => this._data.Span[4] = value;
    }

    /// <summary>
    /// Gets or sets the name.
    /// </summary>
    public string Name
    {
        get => this._data.Span.ExtractString(5, 10, System.Text.Encoding.UTF8);
        set => this._data.Slice(5, 10).Span.WriteString(value, System.Text.Encoding.UTF8);
    }

    /// <summary>
    /// Performs an implicit conversion from a Memory of bytes to a <see cref="ChatRoomClientJoined"/>.
    /// </summary>
    /// <param name="packet">The packet as span.</param>
    /// <returns>The packet as struct.</returns>
    public static implicit operator ChatRoomClientJoined(Memory<byte> packet) => new (packet, false);

    /// <summary>
    /// Performs an implicit conversion from <see cref="ChatRoomClientJoined"/> to a Memory of bytes.
    /// </summary>
    /// <param name="packet">The packet as struct.</param>
    /// <returns>The packet as byte span.</returns>
    public static implicit operator Memory<byte>(ChatRoomClientJoined packet) => packet._data; 
}


/// <summary>
/// Is sent by the client when: This packet is sent by the client when it leaves the chat room, before the connection closes.
/// Causes reaction on server side: The server will remove the client from the chat room, notifying the remaining clients.
/// </summary>
public readonly struct LeaveChatRoom
{
    private readonly Memory<byte> _data;

    /// <summary>
    /// Initializes a new instance of the <see cref="LeaveChatRoom"/> struct.
    /// </summary>
    /// <param name="data">The underlying data.</param>
    public LeaveChatRoom(Memory<byte> data)
        : this(data, true)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="LeaveChatRoom"/> struct.
    /// </summary>
    /// <param name="data">The underlying data.</param>
    /// <param name="initialize">If set to <c>true</c>, the header data is automatically initialized and written to the underlying span.</param>
    private LeaveChatRoom(Memory<byte> data, bool initialize)
    {
        this._data = data;
        if (initialize)
        {
            var header = this.Header;
            header.Type = HeaderType;
            header.Code = Code;
            header.Length = (byte)Math.Min(data.Length, Length);
        }
    }

    /// <summary>
    /// Gets the header type of this data packet.
    /// </summary>
    public static byte HeaderType => 0xC1;

    /// <summary>
    /// Gets the operation code of this data packet.
    /// </summary>
    public static byte Code => 0x01;

    /// <summary>
    /// Gets the initial length of this data packet. When the size is dynamic, this value may be bigger than actually needed.
    /// </summary>
    public static int Length => 3;

    /// <summary>
    /// Gets the header of this packet.
    /// </summary>
    public C1Header Header => new (this._data);

    /// <summary>
    /// Performs an implicit conversion from a Memory of bytes to a <see cref="LeaveChatRoom"/>.
    /// </summary>
    /// <param name="packet">The packet as span.</param>
    /// <returns>The packet as struct.</returns>
    public static implicit operator LeaveChatRoom(Memory<byte> packet) => new (packet, false);

    /// <summary>
    /// Performs an implicit conversion from <see cref="LeaveChatRoom"/> to a Memory of bytes.
    /// </summary>
    /// <param name="packet">The packet as struct.</param>
    /// <returns>The packet as byte span.</returns>
    public static implicit operator Memory<byte>(LeaveChatRoom packet) => packet._data; 
}


/// <summary>
/// Is sent by the server when: This packet is sent by the server after a chat client left the chat room.
/// Causes reaction on client side: The client will remove the client from its list, or mark its name in the title bar as offline.
/// </summary>
public readonly struct ChatRoomClientLeft
{
    private readonly Memory<byte> _data;

    /// <summary>
    /// Initializes a new instance of the <see cref="ChatRoomClientLeft"/> struct.
    /// </summary>
    /// <param name="data">The underlying data.</param>
    public ChatRoomClientLeft(Memory<byte> data)
        : this(data, true)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ChatRoomClientLeft"/> struct.
    /// </summary>
    /// <param name="data">The underlying data.</param>
    /// <param name="initialize">If set to <c>true</c>, the header data is automatically initialized and written to the underlying span.</param>
    private ChatRoomClientLeft(Memory<byte> data, bool initialize)
    {
        this._data = data;
        if (initialize)
        {
            var header = this.Header;
            header.Type = HeaderType;
            header.Code = Code;
            header.Length = (byte)Math.Min(data.Length, Length);
            header.SubCode = SubCode;
        }
    }

    /// <summary>
    /// Gets the header type of this data packet.
    /// </summary>
    public static byte HeaderType => 0xC1;

    /// <summary>
    /// Gets the operation code of this data packet.
    /// </summary>
    public static byte Code => 0x01;

    /// <summary>
    /// Gets the operation sub-code of this data packet.
    /// The <see cref="Code" /> is used as a grouping key.
    /// </summary>
    public static byte SubCode => 0x01;

    /// <summary>
    /// Gets the initial length of this data packet. When the size is dynamic, this value may be bigger than actually needed.
    /// </summary>
    public static int Length => 15;

    /// <summary>
    /// Gets the header of this packet.
    /// </summary>
    public C1HeaderWithSubCode Header => new (this._data);

    /// <summary>
    /// Gets or sets the client index.
    /// </summary>
    public byte ClientIndex
    {
        get => this._data.Span[4];
        set => this._data.Span[4] = value;
    }

    /// <summary>
    /// Gets or sets the name.
    /// </summary>
    public string Name
    {
        get => this._data.Span.ExtractString(5, 10, System.Text.Encoding.UTF8);
        set => this._data.Slice(5, 10).Span.WriteString(value, System.Text.Encoding.UTF8);
    }

    /// <summary>
    /// Performs an implicit conversion from a Memory of bytes to a <see cref="ChatRoomClientLeft"/>.
    /// </summary>
    /// <param name="packet">The packet as span.</param>
    /// <returns>The packet as struct.</returns>
    public static implicit operator ChatRoomClientLeft(Memory<byte> packet) => new (packet, false);

    /// <summary>
    /// Performs an implicit conversion from <see cref="ChatRoomClientLeft"/> to a Memory of bytes.
    /// </summary>
    /// <param name="packet">The packet as struct.</param>
    /// <returns>The packet as byte span.</returns>
    public static implicit operator Memory<byte>(ChatRoomClientLeft packet) => packet._data; 
}


/// <summary>
/// Is sent by the server when: This packet is sent by the server after another chat client sent a message to the current chat room.
/// Causes reaction on client side: The client will show the message.
/// </summary>
public readonly struct ChatRoomClients
{
    private readonly Memory<byte> _data;

    /// <summary>
    /// Initializes a new instance of the <see cref="ChatRoomClients"/> struct.
    /// </summary>
    /// <param name="data">The underlying data.</param>
    public ChatRoomClients(Memory<byte> data)
        : this(data, true)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ChatRoomClients"/> struct.
    /// </summary>
    /// <param name="data">The underlying data.</param>
    /// <param name="initialize">If set to <c>true</c>, the header data is automatically initialized and written to the underlying span.</param>
    private ChatRoomClients(Memory<byte> data, bool initialize)
    {
        this._data = data;
        if (initialize)
        {
            var header = this.Header;
            header.Type = HeaderType;
            header.Code = Code;
            header.Length = (ushort)data.Length;
        }
    }

    /// <summary>
    /// Gets the header type of this data packet.
    /// </summary>
    public static byte HeaderType => 0xC2;

    /// <summary>
    /// Gets the operation code of this data packet.
    /// </summary>
    public static byte Code => 0x02;

    /// <summary>
    /// Gets the header of this packet.
    /// </summary>
    public C2Header Header => new (this._data);

    /// <summary>
    /// Gets or sets the client count.
    /// </summary>
    public byte ClientCount
    {
        get => this._data.Span[6];
        set => this._data.Span[6] = value;
    }

    /// <summary>
    /// Gets the <see cref="ChatClient"/> of the specified index.
    /// </summary>
        public ChatClient this[int index] => new (this._data.Slice(8 + index * ChatClient.Length));

    /// <summary>
    /// Performs an implicit conversion from a Memory of bytes to a <see cref="ChatRoomClients"/>.
    /// </summary>
    /// <param name="packet">The packet as span.</param>
    /// <returns>The packet as struct.</returns>
    public static implicit operator ChatRoomClients(Memory<byte> packet) => new (packet, false);

    /// <summary>
    /// Performs an implicit conversion from <see cref="ChatRoomClients"/> to a Memory of bytes.
    /// </summary>
    /// <param name="packet">The packet as struct.</param>
    /// <returns>The packet as byte span.</returns>
    public static implicit operator Memory<byte>(ChatRoomClients packet) => packet._data; 

    /// <summary>
    /// Calculates the size of the packet for the specified count of <see cref="ChatClient"/>.
    /// </summary>
    /// <param name="clientsCount">The count of <see cref="ChatClient"/> from which the size will be calculated.</param>
        
    public static int GetRequiredSize(int clientsCount) => clientsCount * ChatClient.Length + 8;


/// <summary>
/// Contains the index and the name of a connected chat client in the room..
/// </summary>
public readonly struct ChatClient
{
    private readonly Memory<byte> _data;

    /// <summary>
    /// Initializes a new instance of the <see cref="ChatClient"/> struct.
    /// </summary>
    /// <param name="data">The underlying data.</param>
    public ChatClient(Memory<byte> data)
    {
        this._data = data;
    }

    /// <summary>
    /// Gets the initial length of this data packet. When the size is dynamic, this value may be bigger than actually needed.
    /// </summary>
    public static int Length => 11;

    /// <summary>
    /// Gets or sets the index.
    /// </summary>
    public byte Index
    {
        get => this._data.Span[0];
        set => this._data.Span[0] = value;
    }

    /// <summary>
    /// Gets or sets the name.
    /// </summary>
    public string Name
    {
        get => this._data.Span.ExtractString(1, 10, System.Text.Encoding.UTF8);
        set => this._data.Slice(1, 10).Span.WriteString(value, System.Text.Encoding.UTF8);
    }
}
}


/// <summary>
/// Is sent by the server when: This packet is sent by the server after another chat client sent a message to the current chat room.
/// Causes reaction on client side: The client will show the message.
/// </summary>
public readonly struct ChatMessage
{
    private readonly Memory<byte> _data;

    /// <summary>
    /// Initializes a new instance of the <see cref="ChatMessage"/> struct.
    /// </summary>
    /// <param name="data">The underlying data.</param>
    public ChatMessage(Memory<byte> data)
        : this(data, true)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="ChatMessage"/> struct.
    /// </summary>
    /// <param name="data">The underlying data.</param>
    /// <param name="initialize">If set to <c>true</c>, the header data is automatically initialized and written to the underlying span.</param>
    private ChatMessage(Memory<byte> data, bool initialize)
    {
        this._data = data;
        if (initialize)
        {
            var header = this.Header;
            header.Type = HeaderType;
            header.Code = Code;
            header.Length = (byte)data.Length;
        }
    }

    /// <summary>
    /// Gets the header type of this data packet.
    /// </summary>
    public static byte HeaderType => 0xC1;

    /// <summary>
    /// Gets the operation code of this data packet.
    /// </summary>
    public static byte Code => 0x04;

    /// <summary>
    /// Gets the header of this packet.
    /// </summary>
    public C1Header Header => new (this._data);

    /// <summary>
    /// Gets or sets the sender index.
    /// </summary>
    public byte SenderIndex
    {
        get => this._data.Span[3];
        set => this._data.Span[3] = value;
    }

    /// <summary>
    /// Gets or sets the message length.
    /// </summary>
    public byte MessageLength
    {
        get => this._data.Span[4];
        set => this._data.Span[4] = value;
    }

    /// <summary>
    /// Gets or sets the message. It's "encrypted" with the 3-byte XOR key (FC CF AB).
    /// </summary>
    public Span<byte> Message
    {
        get => this._data.Slice(5).Span;
    }

    /// <summary>
    /// Performs an implicit conversion from a Memory of bytes to a <see cref="ChatMessage"/>.
    /// </summary>
    /// <param name="packet">The packet as span.</param>
    /// <returns>The packet as struct.</returns>
    public static implicit operator ChatMessage(Memory<byte> packet) => new (packet, false);

    /// <summary>
    /// Performs an implicit conversion from <see cref="ChatMessage"/> to a Memory of bytes.
    /// </summary>
    /// <param name="packet">The packet as struct.</param>
    /// <returns>The packet as byte span.</returns>
    public static implicit operator Memory<byte>(ChatMessage packet) => packet._data; 

    /// <summary>
    /// Calculates the size of the packet for the specified length of <see cref="Message"/>.
    /// </summary>
    /// <param name="messageLength">The length in bytes of <see cref="Message"/> on which the required size depends.</param>
        
    public static int GetRequiredSize(int messageLength) => messageLength + 5;
}


/// <summary>
/// Is sent by the client when: This packet is sent by the client in a fixed interval.
/// Causes reaction on server side: The server will keep the connection and chat room intact as long as the clients sends a message in a certain period of time.
/// </summary>
public readonly struct KeepAlive
{
    private readonly Memory<byte> _data;

    /// <summary>
    /// Initializes a new instance of the <see cref="KeepAlive"/> struct.
    /// </summary>
    /// <param name="data">The underlying data.</param>
    public KeepAlive(Memory<byte> data)
        : this(data, true)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="KeepAlive"/> struct.
    /// </summary>
    /// <param name="data">The underlying data.</param>
    /// <param name="initialize">If set to <c>true</c>, the header data is automatically initialized and written to the underlying span.</param>
    private KeepAlive(Memory<byte> data, bool initialize)
    {
        this._data = data;
        if (initialize)
        {
            var header = this.Header;
            header.Type = HeaderType;
            header.Code = Code;
            header.Length = (byte)Math.Min(data.Length, Length);
        }
    }

    /// <summary>
    /// Gets the header type of this data packet.
    /// </summary>
    public static byte HeaderType => 0xC1;

    /// <summary>
    /// Gets the operation code of this data packet.
    /// </summary>
    public static byte Code => 0x05;

    /// <summary>
    /// Gets the initial length of this data packet. When the size is dynamic, this value may be bigger than actually needed.
    /// </summary>
    public static int Length => 3;

    /// <summary>
    /// Gets the header of this packet.
    /// </summary>
    public C1Header Header => new (this._data);

    /// <summary>
    /// Performs an implicit conversion from a Memory of bytes to a <see cref="KeepAlive"/>.
    /// </summary>
    /// <param name="packet">The packet as span.</param>
    /// <returns>The packet as struct.</returns>
    public static implicit operator KeepAlive(Memory<byte> packet) => new (packet, false);

    /// <summary>
    /// Performs an implicit conversion from <see cref="KeepAlive"/> to a Memory of bytes.
    /// </summary>
    /// <param name="packet">The packet as struct.</param>
    /// <returns>The packet as byte span.</returns>
    public static implicit operator Memory<byte>(KeepAlive packet) => packet._data; 
}
